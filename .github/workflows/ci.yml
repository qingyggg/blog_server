name: CI/CD with Docker-Compose

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup-environment:
    runs-on: ubuntu-latest

    services:
      docker:
        name: Docker Engine
        uses: docker/setup-buildx-action@v2

    steps:
      # Step 1: 检出代码库
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: 安装 Docker Compose
      - name: Install Docker Compose
        run: sudo apt-get install docker-compose

      # Step 3: 启动 Docker Compose 服务 (假设 docker-compose.yml 在项目根目录)
      - name: Start services with Docker Compose
        run: docker-compose -f ./docker-compose.yml up -d

      # Step 4: 等待服务启动
      - name: Wait for services
        run: |
          docker-compose ps
          sleep 20  # 等待 20 秒以确保服务启动

      # Step 5: 使用 mkcert 生成自签名 SSL 证书 (或 Let's Encrypt)
      - name: Setup mkcert for HTTPS
        run: |
          sudo apt-get install libnss3-tools
          curl -JLO https://dl.filippo.io/mkcert/latest?for=linux/amd64
          chmod +x mkcert-v*-linux-amd64
          sudo mv mkcert-v*-linux-amd64 /usr/local/bin/mkcert
          mkcert -install
          mkcert localhost 127.0.0.1

      # Step 6: 设置 Node.js 环境
      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      # Step 7: 安装 Apifox CLI
      - name: Install Apifox CLI
        run: npm install -g apifox-cli

      # Step 8: 运行 Apifox 测试场景
      - name: Running Test Scenario
        run: apifox run --access-token APS-9C2cvKvnCqdHATjA4OX3dyCcDpYDNObT -t 5264707 -e 25700446 -n 1 -r html,cli

      # Step 9: 检查 Docker Compose 服务健康状态 (可选)
      - name: Check Docker Compose service health
        run: docker-compose ps

      # Step 10: 关闭并清理服务
      - name: Tear down Docker Compose
        run: docker-compose down
