// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q               = new(Query)
	Article         *article
	ArticleCollect  *articleCollect
	ArticleFavorite *articleFavorite
	CommentFavorite *commentFavorite
	Follow          *follow
	User            *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Article = &Q.Article
	ArticleCollect = &Q.ArticleCollect
	ArticleFavorite = &Q.ArticleFavorite
	CommentFavorite = &Q.CommentFavorite
	Follow = &Q.Follow
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:              db,
		Article:         newArticle(db, opts...),
		ArticleCollect:  newArticleCollect(db, opts...),
		ArticleFavorite: newArticleFavorite(db, opts...),
		CommentFavorite: newCommentFavorite(db, opts...),
		Follow:          newFollow(db, opts...),
		User:            newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Article         article
	ArticleCollect  articleCollect
	ArticleFavorite articleFavorite
	CommentFavorite commentFavorite
	Follow          follow
	User            user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		Article:         q.Article.clone(db),
		ArticleCollect:  q.ArticleCollect.clone(db),
		ArticleFavorite: q.ArticleFavorite.clone(db),
		CommentFavorite: q.CommentFavorite.clone(db),
		Follow:          q.Follow.clone(db),
		User:            q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		Article:         q.Article.replaceDB(db),
		ArticleCollect:  q.ArticleCollect.replaceDB(db),
		ArticleFavorite: q.ArticleFavorite.replaceDB(db),
		CommentFavorite: q.CommentFavorite.replaceDB(db),
		Follow:          q.Follow.replaceDB(db),
		User:            q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Article         IArticleDo
	ArticleCollect  IArticleCollectDo
	ArticleFavorite IArticleFavoriteDo
	CommentFavorite ICommentFavoriteDo
	Follow          IFollowDo
	User            IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Article:         q.Article.WithContext(ctx),
		ArticleCollect:  q.ArticleCollect.WithContext(ctx),
		ArticleFavorite: q.ArticleFavorite.WithContext(ctx),
		CommentFavorite: q.CommentFavorite.WithContext(ctx),
		Follow:          q.Follow.WithContext(ctx),
		User:            q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
