// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/qingyggg/blog_server/biz/model/orm_gen"
)

func newArticleCollect(db *gorm.DB, opts ...gen.DOOption) articleCollect {
	_articleCollect := articleCollect{}

	_articleCollect.articleCollectDo.UseDB(db, opts...)
	_articleCollect.articleCollectDo.UseModel(&orm_gen.ArticleCollect{})

	tableName := _articleCollect.articleCollectDo.TableName()
	_articleCollect.ALL = field.NewAsterisk(tableName)
	_articleCollect.ID = field.NewInt64(tableName, "id")
	_articleCollect.ArticleID = field.NewBytes(tableName, "article_id")
	_articleCollect.UserID = field.NewBytes(tableName, "user_id")
	_articleCollect.Tag = field.NewString(tableName, "tag")

	_articleCollect.fillFieldMap()

	return _articleCollect
}

// articleCollect 收藏表
type articleCollect struct {
	articleCollectDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键
	ArticleID field.Bytes  // 文章ID
	UserID    field.Bytes  // 用户ID
	Tag       field.String // 收藏分类

	fieldMap map[string]field.Expr
}

func (a articleCollect) Table(newTableName string) *articleCollect {
	a.articleCollectDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a articleCollect) As(alias string) *articleCollect {
	a.articleCollectDo.DO = *(a.articleCollectDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *articleCollect) updateTableName(table string) *articleCollect {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.ArticleID = field.NewBytes(table, "article_id")
	a.UserID = field.NewBytes(table, "user_id")
	a.Tag = field.NewString(table, "tag")

	a.fillFieldMap()

	return a
}

func (a *articleCollect) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *articleCollect) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["id"] = a.ID
	a.fieldMap["article_id"] = a.ArticleID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["tag"] = a.Tag
}

func (a articleCollect) clone(db *gorm.DB) articleCollect {
	a.articleCollectDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a articleCollect) replaceDB(db *gorm.DB) articleCollect {
	a.articleCollectDo.ReplaceDB(db)
	return a
}

type articleCollectDo struct{ gen.DO }

type IArticleCollectDo interface {
	gen.SubQuery
	Debug() IArticleCollectDo
	WithContext(ctx context.Context) IArticleCollectDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IArticleCollectDo
	WriteDB() IArticleCollectDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IArticleCollectDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IArticleCollectDo
	Not(conds ...gen.Condition) IArticleCollectDo
	Or(conds ...gen.Condition) IArticleCollectDo
	Select(conds ...field.Expr) IArticleCollectDo
	Where(conds ...gen.Condition) IArticleCollectDo
	Order(conds ...field.Expr) IArticleCollectDo
	Distinct(cols ...field.Expr) IArticleCollectDo
	Omit(cols ...field.Expr) IArticleCollectDo
	Join(table schema.Tabler, on ...field.Expr) IArticleCollectDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IArticleCollectDo
	RightJoin(table schema.Tabler, on ...field.Expr) IArticleCollectDo
	Group(cols ...field.Expr) IArticleCollectDo
	Having(conds ...gen.Condition) IArticleCollectDo
	Limit(limit int) IArticleCollectDo
	Offset(offset int) IArticleCollectDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IArticleCollectDo
	Unscoped() IArticleCollectDo
	Create(values ...*orm_gen.ArticleCollect) error
	CreateInBatches(values []*orm_gen.ArticleCollect, batchSize int) error
	Save(values ...*orm_gen.ArticleCollect) error
	First() (*orm_gen.ArticleCollect, error)
	Take() (*orm_gen.ArticleCollect, error)
	Last() (*orm_gen.ArticleCollect, error)
	Find() ([]*orm_gen.ArticleCollect, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*orm_gen.ArticleCollect, err error)
	FindInBatches(result *[]*orm_gen.ArticleCollect, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*orm_gen.ArticleCollect) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IArticleCollectDo
	Assign(attrs ...field.AssignExpr) IArticleCollectDo
	Joins(fields ...field.RelationField) IArticleCollectDo
	Preload(fields ...field.RelationField) IArticleCollectDo
	FirstOrInit() (*orm_gen.ArticleCollect, error)
	FirstOrCreate() (*orm_gen.ArticleCollect, error)
	FindByPage(offset int, limit int) (result []*orm_gen.ArticleCollect, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IArticleCollectDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a articleCollectDo) Debug() IArticleCollectDo {
	return a.withDO(a.DO.Debug())
}

func (a articleCollectDo) WithContext(ctx context.Context) IArticleCollectDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a articleCollectDo) ReadDB() IArticleCollectDo {
	return a.Clauses(dbresolver.Read)
}

func (a articleCollectDo) WriteDB() IArticleCollectDo {
	return a.Clauses(dbresolver.Write)
}

func (a articleCollectDo) Session(config *gorm.Session) IArticleCollectDo {
	return a.withDO(a.DO.Session(config))
}

func (a articleCollectDo) Clauses(conds ...clause.Expression) IArticleCollectDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a articleCollectDo) Returning(value interface{}, columns ...string) IArticleCollectDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a articleCollectDo) Not(conds ...gen.Condition) IArticleCollectDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a articleCollectDo) Or(conds ...gen.Condition) IArticleCollectDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a articleCollectDo) Select(conds ...field.Expr) IArticleCollectDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a articleCollectDo) Where(conds ...gen.Condition) IArticleCollectDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a articleCollectDo) Order(conds ...field.Expr) IArticleCollectDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a articleCollectDo) Distinct(cols ...field.Expr) IArticleCollectDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a articleCollectDo) Omit(cols ...field.Expr) IArticleCollectDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a articleCollectDo) Join(table schema.Tabler, on ...field.Expr) IArticleCollectDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a articleCollectDo) LeftJoin(table schema.Tabler, on ...field.Expr) IArticleCollectDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a articleCollectDo) RightJoin(table schema.Tabler, on ...field.Expr) IArticleCollectDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a articleCollectDo) Group(cols ...field.Expr) IArticleCollectDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a articleCollectDo) Having(conds ...gen.Condition) IArticleCollectDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a articleCollectDo) Limit(limit int) IArticleCollectDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a articleCollectDo) Offset(offset int) IArticleCollectDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a articleCollectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IArticleCollectDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a articleCollectDo) Unscoped() IArticleCollectDo {
	return a.withDO(a.DO.Unscoped())
}

func (a articleCollectDo) Create(values ...*orm_gen.ArticleCollect) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a articleCollectDo) CreateInBatches(values []*orm_gen.ArticleCollect, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a articleCollectDo) Save(values ...*orm_gen.ArticleCollect) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a articleCollectDo) First() (*orm_gen.ArticleCollect, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*orm_gen.ArticleCollect), nil
	}
}

func (a articleCollectDo) Take() (*orm_gen.ArticleCollect, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*orm_gen.ArticleCollect), nil
	}
}

func (a articleCollectDo) Last() (*orm_gen.ArticleCollect, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*orm_gen.ArticleCollect), nil
	}
}

func (a articleCollectDo) Find() ([]*orm_gen.ArticleCollect, error) {
	result, err := a.DO.Find()
	return result.([]*orm_gen.ArticleCollect), err
}

func (a articleCollectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*orm_gen.ArticleCollect, err error) {
	buf := make([]*orm_gen.ArticleCollect, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a articleCollectDo) FindInBatches(result *[]*orm_gen.ArticleCollect, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a articleCollectDo) Attrs(attrs ...field.AssignExpr) IArticleCollectDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a articleCollectDo) Assign(attrs ...field.AssignExpr) IArticleCollectDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a articleCollectDo) Joins(fields ...field.RelationField) IArticleCollectDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a articleCollectDo) Preload(fields ...field.RelationField) IArticleCollectDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a articleCollectDo) FirstOrInit() (*orm_gen.ArticleCollect, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*orm_gen.ArticleCollect), nil
	}
}

func (a articleCollectDo) FirstOrCreate() (*orm_gen.ArticleCollect, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*orm_gen.ArticleCollect), nil
	}
}

func (a articleCollectDo) FindByPage(offset int, limit int) (result []*orm_gen.ArticleCollect, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a articleCollectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a articleCollectDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a articleCollectDo) Delete(models ...*orm_gen.ArticleCollect) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *articleCollectDo) withDO(do gen.Dao) *articleCollectDo {
	a.DO = *do.(*gen.DO)
	return a
}
