// Code generated by hertz generator.

package publish

import (
	"context"
	service "github.com/qingyggg/blog_server/biz/service/publish"
	"github.com/qingyggg/blog_server/pkg/errno"
	"github.com/qingyggg/blog_server/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	publish "github.com/qingyggg/blog_server/biz/model/hertz/basic/publish"
)

// PublishAction 发表文章接口
// @Summary 发表文章
// @Description 用户可以通过此接口发表一篇文章
// @Tags 文章管理
// @Accept  json
// @Produce  json
// @Param  data  body  publish.CreateActionRequest  true  "文章创建请求参数"
// @Success 200 {object} publish.CreateActionResponse "成功响应"
// @Failure 400 {object} common.BaseResponse "请求参数错误"
// @Failure 500 {object} common.BaseResponse "服务器内部错误"
// @Router /blog_server/publish/action [post]
func PublishAction(ctx context.Context, c *app.RequestContext) {
	var err error
	req := new(publish.CreateActionRequest)
	err = c.BindAndValidate(req)
	if err != nil {
		utils.ErrResp(c, err)
		return
	}

	err, aHashId := service.NewPublishService(ctx, c).PublishCreate(req)
	if err != nil {
		utils.ErrResp(c, err)
		return
	}

	c.JSON(consts.StatusOK, &publish.CreateActionResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
		AHashId:    aHashId,
	})
}

// PublishModifyAction 修改文章接口
// @Summary 修改文章
// @Description 用户可以通过此接口修改一篇文章
// @Tags 文章管理
// @Accept  json
// @Produce  json
// @Param  data  body  publish.ModifyActionRequest  true  "文章修改请求参数"
// @Success 200 {object} publish.ActionResponse "成功响应"
// @Failure 400 {object} common.BaseResponse "请求参数错误"
// @Failure 500 {object} common.BaseResponse "服务器内部错误"
// @Router /blog_server/publish/action [patch]
func PublishModifyAction(ctx context.Context, c *app.RequestContext) {
	var err error
	req := new(publish.ModifyActionRequest)
	err = c.BindAndValidate(req)
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	err = service.NewPublishService(ctx, c).PublishModify(req)
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	c.JSON(consts.StatusOK, &publish.ActionResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
	})
}

// PublishDelAction 删除文章接口
// @Summary 删除文章
// @Description 用户可以通过此接口删除一篇文章
// @Tags 文章管理
// @Accept  json
// @Produce  json
// @Param  data  body  publish.DelActionRequest  true  "文章删除请求参数"
// @Success 200 {object} publish.ActionResponse "成功响应"
// @Failure 400 {object} common.BaseResponse "请求参数错误"
// @Failure 500 {object} common.BaseResponse "服务器内部错误"
// @Router /blog_server/publish/action [delete]
func PublishDelAction(ctx context.Context, c *app.RequestContext) {
	var err error
	req := new(publish.DelActionRequest)
	err = c.BindAndValidate(req)
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	err = service.NewPublishService(ctx, c).PublishDelete(req)
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	c.JSON(consts.StatusOK, &publish.ActionResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
	})
}

// PublishList 获取文章列表接口
// @Summary 获取文章列表
// @Description 用户可以通过此接口获取文章列表
// @Tags 文章管理
// @Accept  json
// @Produce  json
// @Param  data  query  publish.CardsRequest  true  "文章列表请求参数"
// @Success 200 {object} publish.CardsResponse "成功响应，返回文章列表"
// @Failure 400 {object} common.BaseResponse "请求参数错误"
// @Failure 500 {object} common.BaseResponse "服务器内部错误"
// @Router /blog_server/publish/list [get]
func PublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	req := new(publish.CardsRequest)
	err = c.BindAndValidate(req)
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	cards, err := service.NewPublishService(ctx, c).PublishList(req)
	if err != nil {
		utils.ErrResp(c, err)
		return
	}

	c.JSON(consts.StatusOK, &publish.CardsResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
		List:       cards,
	})
}

// PublishDetail 获取文章详情接口
// @Summary 获取文章详情
// @Description 用户可以通过此接口获取某篇文章的详细信息
// @Tags 文章管理
// @Accept  json
// @Produce  json
// @Param  data  query  publish.DetailRequest  true  "文章详情请求参数"
// @Success 200 {object} publish.ArticleResponse "成功响应，返回文章详情"
// @Failure 400 {object} common.BaseResponse "请求参数错误"
// @Failure 500 {object} common.BaseResponse "服务器内部错误"
// @Router /blog_server/publish/detail [get]
func PublishDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	req := new(publish.DetailRequest)
	err = c.BindAndValidate(req)
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	detail, err := service.NewPublishService(ctx, c).PublishDetail(req)
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	c.JSON(consts.StatusOK, &publish.ArticleResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
		Article:    detail,
	})
}

// PublishViewCountAdd 增加文章阅读数接口
// @Summary 增加文章阅读数
// @Description 用户可以通过此接口增加某篇文章的阅读数
// @Tags 文章管理
// @Accept  json
// @Produce  json
// @Param  data  body  publish.ActionRequest  true  "文章阅读数增加请求参数"
// @Success 200 {object} publish.ActionResponse "成功响应"
// @Failure 400 {object} common.BaseResponse "请求参数错误"
// @Failure 500 {object} common.BaseResponse "服务器内部错误"
// @Router /blog_server/publish/view_add [post]
func PublishViewCountAdd(ctx context.Context, c *app.RequestContext) {
	var err error
	req := new(publish.ActionRequest)
	err = c.BindAndValidate(req)
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	err = service.NewPublishService(ctx, c).AddViewCount(req)
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	c.JSON(consts.StatusOK, &publish.ActionResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
	})
}
