syntax = "proto3";

package publish;

import "api.proto";
import "common.proto";

option go_package = "hertz/basic/publish";

message ArticleBaseActionRequest{
  int64 uid=1;//作者id
  string aHashID=2;//文章的hashid
}
//文章的创建
message ArticleCreateActionRequest {
  int64 uid=1;
  ArticleBase payload=2;
}

//文章的修改
message ArticleModifyActionRequest {
  ArticleBaseActionRequest base=1;
  ArticleBase payload=2;
}

message ArticleActionResponse {
  int32 status_code = 1[(api.go_tag)='json:"status_code"'];
  string status_msg = 2;
}
message ArticleCreateActionResponse {
  int32 status_code = 1[(api.go_tag)='json:"status_code"'];
  string status_msg = 2;
  string aHashId=3;
}

//文章卡片列表
message ArticleCardsRequest {
  int64 user_id = 1;//如果id为0，则根据时间的先后去请求文章列表
  int32 offset=2;
}

message ArticleResponse{
  int32 status_code = 1[(api.go_tag)='json:"status_code"'];
  string status_msg = 2;
  Article article=3;
}

message ArticleCardsResponse {
  int32 status_code = 1[(api.go_tag)='json:"status_code"'];
  string status_msg = 2;
  repeated ArticleCard list=3;
}

service PublishHandler {
  rpc PublishAction(ArticleCreateActionRequest) returns(ArticleCreateActionResponse) {
    option (api.post) = "/blog_server/publish/action";
  }
  rpc PublishModifyAction(ArticleModifyActionRequest) returns(ArticleActionResponse) {
    option (api.patch) = "/blog_server/publish/action";
  }
  rpc PublishDelAction(ArticleBaseActionRequest) returns(ArticleActionResponse) {
    option (api.delete) = "/blog_server/publish/action";
    // Logged in user selects video to upload.
  }
  rpc PublishList(ArticleCardsRequest) returns(ArticleCardsResponse) {
    option (api.get) = "/blog_server/publish/list";
    // Get logged-in to the user's video publishing list, and directly list all the videos that the user has contributed.
  }
  rpc PublishDetail(ArticleBaseActionRequest) returns(ArticleResponse) {
    option (api.get) = "/blog_server/publish/detail";
    // Get logged-in to the user's video publishing list, and directly list all the videos that the user has contributed.
  }
  rpc PublishViewCountAdd(ArticleBaseActionRequest) returns(ArticleActionResponse){
    option (api.post) ="/blog_server/publish/view_add";
  }
}

